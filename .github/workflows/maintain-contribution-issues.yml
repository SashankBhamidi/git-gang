name: Maintain Contribution Issues

on:
  issues:
    types: [closed]
  schedule:
    # Run daily at 00:00 UTC to ensure we always have 3 open issues
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  issues: write

jobs:
  maintain-issues:
    # Only run in the main repository, not in forks
    if: github.repository == 'SashankBhamidi/git-gang'
    runs-on: ubuntu-latest

    steps:
      - name: Check contribution issue count
        id: check
        run: |
          set -euo pipefail

          # Count open issues with "contribution" label (with retry)
          MAX_RETRIES=3
          RETRY_COUNT=0
          OPEN_COUNT=""

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if OPEN_COUNT=$(gh issue list --repo ${{ github.repository }} --label contribution --state open --json number --jq 'length' 2>/dev/null); then
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retry $RETRY_COUNT/$MAX_RETRIES: Waiting 2s..."
              sleep 2
            fi
          done

          if [ -z "$OPEN_COUNT" ]; then
            echo "Error: Could not fetch issue count after $MAX_RETRIES attempts"
            echo "need_to_create=0" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Found $OPEN_COUNT open contribution issues"

          # Calculate how many we need to create
          TARGET=7
          NEEDED=$((TARGET - OPEN_COUNT))

          if [ $NEEDED -gt 0 ]; then
            echo "need_to_create=$NEEDED" >> $GITHUB_OUTPUT
            echo "Need to create $NEEDED more issue(s) to maintain $TARGET open issues"
          else
            echo "need_to_create=0" >> $GITHUB_OUTPUT
            echo "Already have $TARGET or more open issues"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create contribution issues
        if: steps.check.outputs.need_to_create > 0
        run: |
          set -euo pipefail

          NEEDED=${{ steps.check.outputs.need_to_create }}
          CURRENT_MONTH=$(date +%m)

          # Determine labels based on month
          if [ "$CURRENT_MONTH" = "10" ]; then
            echo "October detected - adding Hacktoberfest label"
            LABELS="good first issue,help wanted,contribution,hacktoberfest"
          else
            LABELS="good first issue,help wanted,contribution"
          fi

          # Split labels for gh api
          IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"

          # Create issue body file
          cat > /tmp/issue-body.txt << 'EOFBODY'
          Add your name to the contributors list.

          **Note:** No need to ask for assignment - the automation system will auto-assign you an issue within the PR. Just follow the steps below!

          ## How to contribute

          1. **Star this repository** (helps us reach more contributors!)
          2. Open [ADD_YOUR_NAME.md](https://github.com/SashankBhamidi/git-gang/blob/master/ADD_YOUR_NAME.md)
          3. Click the edit icon
          4. Fill out:
             - Name: Your Name
             - Username: your-github-username
             - Message: Optional message
          5. Open a pull request
          6. Automation validates and merges automatically

          See [README](https://github.com/SashankBhamidi/git-gang/blob/master/README.md) for details.
          EOFBODY

          # Create the needed number of issues
          for i in $(seq 1 $NEEDED); do
            echo "Creating contribution issue $i of $NEEDED..."

            # Create issue with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if gh api repos/${{ github.repository }}/issues -X POST \
                -f title="Add your name to Git Gang" \
                -F body=@/tmp/issue-body.txt \
                -f "labels[]=${LABEL_ARRAY[0]}" \
                -f "labels[]=${LABEL_ARRAY[1]}" \
                -f "labels[]=${LABEL_ARRAY[2]}" \
                $([ "${LABEL_ARRAY[3]}" ] && echo "-f labels[]=${LABEL_ARRAY[3]}" || echo "") 2>/dev/null; then
                echo "✓ Created issue $i"
                break
              fi

              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Retry $RETRY_COUNT/$MAX_RETRIES: Waiting 2s..."
                sleep 2
              else
                echo "⚠ Failed to create issue $i after $MAX_RETRIES attempts"
              fi
            done

            # Small delay to avoid rate limiting
            sleep 1
          done

          echo "✅ Finished creating contribution issues"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
